theory ssh

begin

builtins: diffie-hellman, hashing, symmetric-encryption,signing

functions: pk/1
functions: kdf/1
functions: mac/2
functions: h/1
functions:senc/2
functions:sdec/2
functions:add/2
functions:sign/2


//////KEY_EXCHANGE///////////

//Different algorithm choices for the encryption, the MAC, and the hash function that are negotiated during the key exchanges.
rule Client_Algorithm_proposals:
    let
        encryption_algos=<'AES', 'ChaCha20'>
        mac_algos=<'HMAC-SHA256','HMAC-SHA1'>
        hash_functions=<'SHA-256','SHA-1'>
        kex_algorithms=<'diffie-hellman-group1-sha1','diffie-hellman-group14-sha1'>
        server_host_key_algorithms = <'ssh-rsa','rsa-sha2-256'>
        Client_Capabilities=<'SSH_MSG_KEXINIT',~C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos,mac_algos,hash_functions,'0'>
    in
        [Fr(~C_Cookie)]
        --[SendClientAlgorithmProposal(~C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos,mac_algos,hash_functions)]->
        [
        Out(Client_Capabilities),
        Stored_Values_Client1(~C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos,mac_algos,hash_functions)
        ]

rule Server_Algorithm_Selection:
    let
        Selected_encryption='AES'
        Selected_mac='HMAC-SHA256'
        Selected_hash='SHA-256'
        Selected_kex_algo='diffie-hellman-group1-sha1'
        Selected_server_host_key_algo='ssh-rsa'
        Client_Capabilities=<'SSH_MSG_KEXINIT',C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos,mac_algos,hash_functions,'0'>
        Server_Selected_Algo=<~S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash>
    in
        [
        Fr(~S_Cookie),
        In(Client_Capabilities)
        ]
        --[ ServerAlgorithmSelection(~S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash)]->
        [
            Out(Server_Selected_Algo),
            Stored_Values_Server1(C_Cookie,~S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash)
        ]

rule generate_server_host_keys:
        let
        KS_pub = pk(~KS_priv)
        in
        [
            Fr(~KS_priv)
        ]
        -->
        [
            !Store_server_host_keys(~KS_priv,KS_pub)
        ]

/*Key exchange for client*/

rule key_exchange_client_1:
    let 
        gc='g'^~x      //client public key
        Selected_encryption='AES'
        Selected_mac='HMAC-SHA256'
        Selected_hash='SHA-256'
        Selected_kex_algo='diffie-hellman-group1-sha1'
        Selected_server_host_key_algo='ssh-rsa'
        Server_Selected_Algo=<~S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash>
        
    in
    [Fr(~x),
    In(Server_Selected_Algo),
    Stored_Values_Client1(C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos, mac_algos, hash_functions)
    ]
    --[ClientAlgorithmSelection(Selected_encryption,Selected_mac,Selected_hash),SendDHpublicKey(gc,$C_ID) ]->
    [!DH_Secret_Key($C_ID,~x),
    Stored_Values_Client2(C_Cookie,Server_Selected_Algo),
    Out(<gc,Server_Selected_Algo>)]

rule key_exchange_server:
    let 
        gs='g'^~y    //server public key
        k=gc^~y
        Server_Selected_Algo=<S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash>
        exchange_Hash_server=h(<k,C_Cookie,Server_Selected_Algo,gc,gs,KS_pub>)
        s=sign(exchange_Hash_server,KS_priv)
    in
    [
        Fr(~y),
        In(<gc,Server_Selected_Algo>),
        Stored_Values_Server1(C_Cookie,S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash),
        !Store_server_host_keys(KS_priv,KS_pub)
    ]
    --[CalculateAndSendExchangeHash(exchange_Hash_server),ComputeSharedSecret(k)]->
    [
    Out(<gs,s,KS_pub>),
    !Shared_secret(k),!DH_Secret_Key($S_ID,~y),
    Store_as_session_identifier_server(exchange_Hash_server)
    ]

rule key_exchange_client_2:
    let 
        gc='g'^x                                                              //client public key
        k=gs^x
        exchange_Hash_client=h(<k,C_Cookie,Server_Selected_Algo,gc,gs,KS_pub>)
    in
    [
        In(<gs,s,KS_pub>),
        !DH_Secret_Key($C_ID,x),
        Stored_Values_Client2(C_Cookie,Server_Selected_Algo)
    ]
    --[VerifyExchangeHash(s),ComputeSharedSecret(k)]->
    [
        Store_as_session_identifier_client(exchange_Hash_client),                  //Program will run only when we comment this value-NEED TO CHECK
        !Shared_secret(k)
    ]


// ////need to check whether we need session_key_derivation_client & session_key_derivation_Server rules or not.

// rule session_key_derivation_client:
//     let 
//     //Server_Selected_Algo=<~S_ID,Selected_encryption,Selected_mac,Selected_hash>
//     //exchange_Hash_client=h(k,Server_Selected_Algo,gc,gs)
//     session_key_client=kdf(k,exchange_Hash_client)
// in
// [
//     Store_as_session_identifier_client(exchange_Hash_client),
//     !Shared_secret(k)
// ]
// --[]->
// [
//     !Session_Key_Client(session_key_client)
// ]

// rule session_key_derivation_Server:
//     let 
//     //Server_Selected_Algo=<~S_ID,Selected_encryption,Selected_mac,Selected_hash>
//     //exchange_Hash_server=h(k,Server_Selected_Algo,gc,gs)
//     session_key_Server=kdf(k,exchange_Hash_client)
// in
// [
//     Store_as_session_identifier_server(exchange_Hash_server),
//     !Shared_secret(k)

// ]
// --[]->
// [
//     !Session_Key_Server(session_key_Server)
// ]

// ///Encryption and Integrity key derivation -use for data encryption and integrity
rule encryption_integrity_key_client:
    let
        EKc=h(<k,exchange_Hash_client,'C'>)
        IKc=h(<k,exchange_Hash_client,'E'>)
    in
    [
        !Shared_secret(k),
        Store_as_session_identifier_client(exchange_Hash_client) //Program will run only when we comment this value-NEED TO CHECK
    ]
-->
[
    !St_Encrypted_key(EKc),
    !St_Integrity_Key(IKc)
]

rule encryption_key_server:
    let
    EKs=h(<k,exchange_Hash_server,'D'>)
    IKs=h(<k,exchange_Hash_server,'F'>)
    in
    [
        !Shared_secret(k),
        Store_as_session_identifier_server(exchange_Hash_server)
    ]
-->
[
    !St_Encrypted_key(EKs),
    !St_Integrity_Key(IKs)
]



// // /*Client sending server request to Server */
rule service_request_client:
    let
    service_name='SSH - service name'   //could be ssh-userauth or ssh-connection based on context
in
[ 

]
--[RequestService(service_name)]->
[
Out(service_name)
]

// // /*Server rejecting server request received from client */
rule service_reject_server:
    let
    service_name='SSH - service name'           //client's requested service
    service_reject_msg = 'SSH_MSG_DISCONNECT'    //reject message send by server
in
[
    In(service_name)                        //server receives service request from client
]
--[RejectRequest(service_name)]->
[
    Out(service_reject_msg)                 //sends disconnect message to client
]

// // /*Server accepting server request received from client */
rule service_accept_server:
    let
    service_name='SSH - service name'
    service_accept_msg = 'SSH_MSG_SERVICE_ACCEPT'           // Message sent by the server to accept the service

in
[
    In(service_name)
]
--[AcceptRequest(service_name)]->
[
    Out(<service_accept_msg,'SSH_MSG_NEWKEYS'>)
]

// // /*Client send data after server accepting the service request */
rule client_send_data:
    let
    service_accept_msg = 'SSH_MSG_SERVICE_ACCEPT'
    sequence_number = '0'                                       //Initialized to zero by assuming this as first packet
    mac_data = mac(IKc,<sequence_number,'unencrypted_data'>)
    encrypted_data=senc('unencrypted_data',EKc)
    added_value=add(sequence_number,1)

in
[
    In(<service_accept_msg,'SSH_MSG_NEWKEYS'>),
    !St_Encrypted_key(EKc),
    !St_Integrity_Key(IKc)
]
--[SendData(<encrypted_data,mac_data>)]->
[
   Out(<encrypted_data,mac_data>),
   !Increment_Store_sequence_number_client(added_value)      //for next packets this incremented sequence number needs to be used
]

// /*Server accepts data from client */
rule server_accept_data:
    let
    EKc=h(<k,exchange_Hash_server,'C'>)
    IKc=h(<k,exchange_Hash_server,'E'>)
    encrypted_data=senc('unencrypted_data',EKc)
    unencrypted_data=sdec(encrypted_data,EKc)
    sequence_number='0'
    mac_data = mac(IKc,<sequence_number,unencrypted_data>)
    verified_mac=mac(IKs,<sequence_number,unencrypted_data>)
    added_value=add(sequence_number,1)

in
[
    In(<encrypted_data,mac_data>),
    Store_as_session_identifier_server(exchange_Hash_server),
    !St_Encrypted_key(EKs),
    !St_Integrity_Key(IKs),
    !Shared_secret(k)
]
--[DecryptData(encrypted_data,mac_data)]->
[Increment_Store_sequence_number_server(added_value)      //for next packets this incremented sequence number needs to be used
]

// // ////KEY-REEXCHANGE- After some time of transmitting data
rule key_reexchange_server_1:
    let
    EKc=h(<k,exchange_Hash_server,'C'>)
    encrypted_data=senc('unencrypted_data',EKc)
    in
    [
        In(encrypted_data),
        Store_as_session_identifier_server(exchange_Hash_server),
        !Shared_secret(k)

    ]
    --[Initiate_KeyReExchange('SSH_MSG_KEXINIT')]->
    [Out('SSH_MSG_KEXINIT')]


rule key_reexchange_client_1:
    let 
        gc_new='g'^~x      //client public key
        
    in
    [   
        In('SSH_MSG_KEXINIT'),
        Fr(~x)
    ]
    --[ComputeNewKeys(gc_new)]->
    [!Client_Secret_Key(~x),
        Out(gc_new)]

rule key_reexchange_server_2:
    let 
        gs_new='g'^~y    //server public key
        k=gc_new^~y
    in
    [
        Fr(~y),
        In(gc_new)
    ]
    --[]->
    [
    Out(gs_new),
    !Shared_secret(k)
    ]

rule key_reexchange_client_2:
    let 
        gc_new=g^x      //client public key
        k=gs_new^x
    in
    [
        In(gs_new),!Client_Secret_Key(x)
    ]
    -->
    [
        !Shared_secret(k)
    ]

rule encryption_key_client_reexchange:
    let
        EKc=h(<k,exchange_Hash_client,'C'>)
    in
    [
    !Shared_secret(k),
    Store_as_session_identifier_client(exchange_Hash_client)
    
    ]
-->
[
    !St_Encrypted_key(EKc)
]

rule encryption_key_server_reexchange:
    let
    EKs=h(<k,exchange_Hash_server,'D'>)
    in
    [
    !Shared_secret(k),
    Store_as_session_identifier_server(exchange_Hash_server)
    
    ]
-->
[
    !St_Encrypted_key(EKs)
]



// /* Additional adversarial capabilities like, for instance, key reveals */

rule reveal_dh_key:
    [
        !DH_Secret_Key($ID,a)                                         //Retrieve persitant fact for ID and diffie helman secret key    
    ]
    --[Reveal_dh_key($ID)]->
    [
        Out(a)                                                         //Send diffie helman secret key 
    ]


rule Reveal_shared_secretKey:
[
    !Shared_secret(k)
]
--[Reveal_shared_secret(k)]->
[
    Out(k)
]

rule reveal_encryption_key:
    [
        !St_Encrypted_key(Ek)                                               
    ]
    --[Reveal_encrypted_key(Ek)]->
    [
        Out(Ek)                                                         
    ]


lemma secrecy:
" All k #i #j.
ComputeSharedSecret(k) @#i
 & ComputeSharedSecret(k) @#j
 ==> ( not (Ex #n. K(k) @n) 
 & not(Ex #n. K(k) @n))
 "

// lemma algorithmSelection:
// " All S_Cookie Selected_kex_algo Selected_server_host_key_algo Selected_encryption Selected_mac Selected_hash #i.
// ServerAlgorithmSelection(S_Cookie,Selected_kex_algo,Selected_server_host_key_algo,Selected_encryption,Selected_mac,Selected_hash) @#i
// ==>(Ex C_Cookie kex_algorithms server_host_key_algorithms encryption_algos mac_algos hash_functions #j.
//     SendClientAlgorithmProposal(C_Cookie,kex_algorithms,server_host_key_algorithms,encryption_algos,mac_algos,hash_functions)@#j & j<i)
// "

// lemma calculateExchangeHashServer:
// "All exchange_Hash_server #i.
// CalculateAndSendExchangeHash(exchange_Hash_server) @#i
// ==> (Ex gc C_ID #j.
//     SendDHpublicKey(gc,$C_ID) @#j & j<i)
// "

lemma dataSendAgreement:
"All encrypted_data mac_data #i.
SendData(<encrypted_data,mac_data>) @#i
==> (Ex service_name #j.
    AcceptRequest(service_name) @#j & j<i)"


lemma keyReExchangeAgreement:
"All gc_new #i.
ComputeNewKeys(gc_new) @#i
==> (Ex SSH_MSG_KEXINIT #j.
    Initiate_KeyReExchange('SSH_MSG_KEXINIT') @#j &j<i)
"

end